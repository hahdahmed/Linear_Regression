import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.metrics import mean_squared_error
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
from sklearn.preprocessing import LabelEncoder

#data
df = pd.read_csv(r'D:\python\course python\datasets\survey lung cancer.csv') #upload data
plt.show()
df
x= np.array (x)
y= np.array(y)

#label encoding
label_encoder=LabelEncoder()
df['LUNG_CANCER']=label_encoder.fit_transform(df['LUNG_CANCER'])
df
    
#choose features

x=df[['AGE', 'CHRONIC DISEASE']]
y= df[['LUNG_CANCER']]

# Encode target variable
le = LabelEncoder()
df['LUNG_CANCER'] = le.fit_transform(df['LUNG_CANCER'])

#split data to training and testing
x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2, shuffle = False ,random_state=42)

# target model
model1 =LinearRegression()
model1.fit(x_train, y_train)
y_train = le.fit_transform(y_train)

# Train logistic regression model
model = LogisticRegression()
model.fit(x_train, y_train)

#predict model
y_pred = model1.predict(x_test)


# make output binary predictions
if y_pred.ndim > 1 and y_pred.shape[1] > 1:
    y_pred = np.argmax(y_pred, axis=1)  #  multi-class  
else:
    y_pred = (y_pred >= 0.5).astype(int)  # binary classification


#accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

#clssification
report = classification_report(y_test, y_pred)
print("Classification Report:\n", report)





